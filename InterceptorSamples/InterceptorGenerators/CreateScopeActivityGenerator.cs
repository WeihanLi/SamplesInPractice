using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Operations;
using System.Diagnostics;
using System.Text;

namespace InterceptorGenerators;

[Generator(LanguageNames.CSharp)]
public sealed class CreateScopeActivityGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var methodCalls = context.SyntaxProvider.CreateSyntaxProvider(
            predicate: static (node, _) =>
            {
                if (node is InvocationExpressionSyntax
                    {
                        Expression: MemberAccessExpressionSyntax
                        {
                            Name.Identifier.ValueText: "CreateScope" or "CreateAsyncScope"
                        }
                    })
                {
                    return true;
                }

                return false;
            }
            ,
            transform: static (context, token) =>
            {
                var operation = context.SemanticModel.GetOperation(context.Node, token);
                if (operation is IInvocationOperation targetOperation 
                    )
                {
                    return new InterceptInvocation(targetOperation);
                }
                return null;
            })
            .Where(static invocation => invocation != null);

        var interceptors = methodCalls.Collect()
            .Select((invocations, _) =>
            {
                var stringBuilder = new StringBuilder();
                foreach (var invocationGroup in invocations.GroupBy(i => new
                         {
                             i!.MethodName,
                             i.ContainingTypeName
                         }))
                {
                    foreach (var invocation in invocationGroup)
                    {
                        Debug.Assert(invocation != null);
                        stringBuilder.AppendLine(
                            $$"""        [System.Runtime.CompilerServices.InterceptsLocationAttribute(@"{{invocation!.Location.FilePath}}", {{invocation.Location.Line}}, {{invocation.Location.Column}})]""");
                    }

                    var interceptorCode =
                        (invocationGroup.Key.ContainingTypeName, invocationGroup.Key.MethodName) switch
                        {
                            ("Microsoft.Extensions.DependencyInjection.IServiceScopeFactory", "CreateScope") 
                                => ScopeActivityGeneratedSource.ServiceScopeFactoryCreateScopeInterceptorCode,
                            ("Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions", "CreateScope") 
                                => ScopeActivityGeneratedSource.ServiceProviderCreateScopeInterceptorCode,
                            ("Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions", "CreateAsyncScope") 
                                => ScopeActivityGeneratedSource.ServiceProviderCreateScopeAsyncInterceptorCode,
                            _ => throw new ArgumentOutOfRangeException($"{invocationGroup.Key.MethodName}")
                        };
                    stringBuilder.AppendLine(interceptorCode);
                    stringBuilder.AppendLine();
                }
                return stringBuilder.ToString().TrimEnd();
            });

        context.RegisterSourceOutput(interceptors, (ctx, sources) =>
        {
            var code = $$"""
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    file sealed class InterceptsLocationAttribute(string filePath, int line, int character) : Attribute;
}

namespace InterceptorPlayground.Generated
{
    using Microsoft.Extensions.DependencyInjection;

    public static partial class GeneratedActivityScope
    {
{{sources}}
    }
}
""";
            ctx.AddSource("GeneratedActivityScopeInterceptor.g.cs", code);
        });
    }
}

file static class ScopeActivityGeneratedSource
{
    public const string ServiceProviderCreateScopeInterceptorCode = """
        public static Microsoft.Extensions.DependencyInjection.IServiceScope ScopeActivityInterceptorMethod(this System.IServiceProvider provider)
        {
            System.Console.WriteLine("scope creating...");
            var scope = provider.CreateScope();
            _ = scope.ServiceProvider.GetRequiredService<TestLibrary.ScopeActivityCreator>();
            System.Console.WriteLine("scope created...");
            return scope;
        }
""";
    
    public const string ServiceProviderCreateScopeAsyncInterceptorCode = """
        public static Microsoft.Extensions.DependencyInjection.AsyncServiceScope ScopeActivityInterceptorAsyncMethod(this System.IServiceProvider provider)
        {
            System.Console.WriteLine("async scope creating...");
            var scope = provider.CreateAsyncScope();
            _ = scope.ServiceProvider.GetRequiredService<TestLibrary.ScopeActivityCreator>();
            System.Console.WriteLine("async scope created...");
            return scope;
        }
""";
    
    public const string ServiceScopeFactoryCreateScopeInterceptorCode = """
        public static Microsoft.Extensions.DependencyInjection.IServiceScope ScopeActivityInterceptorMethod(this IServiceScopeFactory factory)
        {
            System.Console.WriteLine("scope creating...");
            var scope = factory.CreateScope();
            _ = scope.ServiceProvider.GetRequiredService<TestLibrary.ScopeActivityCreator>();
            System.Console.WriteLine("scope created...");
            return scope;
        }
""";
    
    public const string ServiceScopeFactoryCreateScopeAsyncInterceptorCode = """
        public static Microsoft.Extensions.DependencyInjection.AsyncServiceScope ScopeActivityInterceptorAsyncMethod(this IServiceScopeFactory factory)
        {
            System.Console.WriteLine("async scope creating...");
            var scope = factory.CreateAsyncScope();
            _ = scope.ServiceProvider.GetRequiredService<TestLibrary.ScopeActivityCreator>();
            System.Console.WriteLine("async scope created...");
            return scope;
        }
""";
}
